{"version":3,"sources":["graph.ts"],"names":["Edge","Edge.constructor","Edge.toString","Edge.isEqual","Edge.isParentOf","Edge.isChildOf","Graph","Graph.constructor","Graph.clone","Graph.getName","Graph.setName","Graph.addNode","Graph.hasNode","Graph.makeEdge","Graph.getNodes","Graph.deleteNode","Graph.addEdge","Graph.getEdges","Graph.hasEdge","Graph.calculateCpt","Graph.getParents","Graph.getChildren","Graph.topSort","Graph.deleteEdge"],"mappings":"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,GAAGA,EAAEA,CAACA;YAChBA,IAAIA,CAACA,GAASA,IAAIA,CAACA,KAAKA,EAAEA,CAACA;YAE3BA,AACAA,8CAD8CA;gBAC1CA,CAACA,GACDA,IAAIA,WAAWA,CAACA,GAAGA,CACnBA,UAACA,CAACA,IAAOA,MAAMA,CAACA,CAACA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CACjCA,CAACA;YAEFA,CAACA,CAACA,QAAQA,EAAEA,CAACA,OAAOA,CAAEA,UAACA,CAACA;gBACtBA,EAAEA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;oBAC7BA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBACfA,CAACA;YACHA,CAACA,CAACA,CAACA;YAGHA,OAAOA,CAACA,CAACA,IAAIA,EAAEA,GAAGA,CAACA,EAAEA,CAACA;gBACpBA,IAAIA,CAACA,GAAGA,CAACA,CAACA,OAAOA,EAAEA,CAACA,CAACA,CAACA,CAACA;gBACvBA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gBACZA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBAEfA,CAACA,CAACA,WAAWA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,UAACA,KAAKA;oBAC7BA,CAACA,CAACA,UAAUA,CAACA,CAACA,EAAEA,KAAKA,CAACA,CAACA;oBACvBA,EAAEA,CAACA,CAACA,CAACA,CAACA,UAAUA,CAACA,KAAKA,CAACA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;wBACrCA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA;oBACfA,CAACA;gBACHA,CAACA,CAACA,CAACA;YACLA,CAACA;YAEDA,EAAEA,CAACA,CAACA,CAACA,CAACA,QAAQA,EAAEA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBAC5BA,MAAMA,IAAIA,KAAKA,CAACA,kCAAkCA,CAACA,CAACA;YACxDA,CAACA;YACDA,MAAMA,CAACA,MAAMA,CAACA;QAChBA,CAACA;QAEDhB,0BAAUA,GAAVA,UAAWA,EAAwBA,EAAEA,EAAwBA;YAC3DiB,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA,IAAIA,CAACA,QAAQA,CAACA,EAAEA,EAAEA,EAAEA,CAACA,CAACA,CAACA;QAC3CA,CAACA;QACHjB,YAACA;IAADA,CA/JA,AA+JCA,IAAA;IA/JY,aAAK,QA+JjB,CAAA","file":"graph.js","sourcesContent":["/// <reference path=\"app.d.ts\" /> \n/// <reference path=\"graph_node.ts\" /> \n/// <reference path=\"cpt.ts\" /> \n\nimport graph_node   = require('graph_node');\nimport cpt          = require('cpt');\n\n// eval(require('fs').readFileSync('../aux_scripts/collections.js', 'utf8'));\n\nexport class Edge {\n\n  constructor(\n      public source:graph_node.GraphNode,\n      public target:graph_node.GraphNode) {\n    if (source === null || target === null) {\n      throw new Error('Can not construct edge to null node');\n    }\n    if (source === target) {\n      throw new Error('Edge cannot connect a node onto itself');\n    }\n  }\n\n  toString() : string {\n    return this.source.getName() + '->' + this.target.getName();\n  }\n\n  isEqual(a:Edge):boolean {\n    return a.source === this.source && a.target === this.target;\n  }\n\n  isParentOf(child:graph_node.GraphNode) : boolean {\n    return child === this.target;\n  }\n\n  isChildOf(parent:graph_node.GraphNode) : boolean {\n    return parent === this.source;\n  }\n\n}\n\nexport class Graph {\n  private nodes:collections.Set<graph_node.GraphNode>;\n  private edges:collections.Set<Edge>;\n\n\n  constructor(public name:string, nodes = []) {\n\n\n    this.edges = new collections.Set<Edge>();\n    this.nodes = new collections.Set<graph_node.GraphNode>(\n        (gn) => { return gn.getName(); } );\n\n    nodes.forEach((n) => { this.addNode(n); });\n  }\n\n  // create a shallow copy of a graph for topsort\n  private clone() : Graph {\n    var g:Graph = new Graph(this.name);\n\n    this.nodes.forEach((n) => { g.addNode(n); return true; });\n    this.edges.forEach((e) => { \n      g.addEdge(e.source, e.target); return true; });\n\n    return g;\n  }\n\n  getName() : string {\n    return this.name;\n  }\n\n  setName(name: string) {\n\n    this.name = name;\n\n  }\n\n  addNode(node : graph_node.GraphNode) {\n    if (!this.nodes.add(node)) {\n      throw new Error('Node Already Exists in Graph');\n    }\n  }\n\n  hasNode(node : graph_node.GraphNode) {\n    return this.nodes.contains(node);\n  }\n/*\n  getNode(node_name : string) : graph_node.GraphNode {\n    var nodes = this.nodes.toArray();\n\n    for (var i:number = 0; i < nodes.length; i++) {\n      if (nodes[i].getName() === node_name) {\n        return nodes[i];\n      }\n    }\n    return null;\n  }\n*/\n\n  // fails if a node d.n.e in graph\n  private makeEdge(fr: graph_node.GraphNode, to:graph_node.GraphNode) : Edge {\n    if (this.nodes.contains(fr) && this.nodes.contains(to)) {\n      return new Edge(fr, to);\n    } else {\n      throw new Error('Edge can not connect to node not in graph');\n    }\n\n  }\n\n  getNodes() : graph_node.GraphNode[] {\n    return this.nodes.toArray();\n  }\n\n  deleteNode(node: graph_node.GraphNode) { \n    if (this.nodes.remove(node)) {\n      this.edges.forEach( (edge:Edge) => {\n        if (edge.target === node || edge.source === node) {\n          this.edges.remove(edge);\n        }\n        return true;\n      });\n    }\n  }\n\n  addEdge(fr: graph_node.GraphNode, to: graph_node.GraphNode) {\n    this.edges.add(this.makeEdge(fr, to));\n  }\n\n  // returns edges as 2d array of node/column names\n  getEdges() : Edge[] {\n    return this.edges.toArray();\n  }\n\n  hasEdge(fr: graph_node.GraphNode, to: graph_node.GraphNode) : boolean {\n    return this.edges.contains(this.makeEdge(fr, to));\n  }\n\n  calculateCpt(node: graph_node.GraphNode) : cpt.CPT {\n    return new cpt.CPT(node, this.getParents(node));\n  }\n\n\n  getParents(n : graph_node.GraphNode) : graph_node.GraphNode[] {\n    var out = [];\n    this.edges.forEach((edge) => {\n      if (edge.isParentOf(n)) { out.push(edge.target); }\n      return true;\n    });\n    return out;\n  }\n\n  getChildren(n : graph_node.GraphNode) : graph_node.GraphNode[] {\n    var out = [];\n    this.edges.forEach((edge) => {\n      if (edge.isChildOf(n)) { out.push(edge.target); }\n      return true;\n    });\n    return out;\n  }\n\n  // topological sort \n  topSort() : graph_node.GraphNode[] {\n    var sorted = [];\n    var g:Graph = this.clone();\n\n    // the set of all nodes containing no children\n    var s:collections.Set<graph_node.GraphNode> \n      = new collections.Set<graph_node.GraphNode>(\n        (n) => { return n.getName(); }\n    ); \n\n    g.getNodes().forEach( (n) => { \n      if (g.getParents(n).length === 0) {\n            s.add(n); \n      }\n    });\n\n\n    while (s.size() > 0) {\n      var n = s.toArray()[0];\n      s.remove(n);\n      sorted.push(n);\n      \n      g.getChildren(n).forEach((child) => {\n        g.deleteEdge(n, child);\n        if (g.getParents(child).length === 0) {\n          s.add(child);\n        }\n      });\n    }\n\n    if (g.getEdges().length !== 0) {\n        throw new Error('Can Not TopSort, Graph in Cyclic');\n    }\n    return sorted;\n  }\n\n  deleteEdge(fr: graph_node.GraphNode, to: graph_node.GraphNode) {\n    this.edges.remove(this.makeEdge(fr, to));\n  }\n}\n"],"sourceRoot":"/source/"}