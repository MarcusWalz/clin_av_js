{"version":3,"sources":["cpt.ts"],"names":["CPT","CPT.constructor","CPT.calc_offsets","CPT.index","CPT.unindex","CPT.conditionTable"],"mappings":"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","file":"cpt.js","sourcesContent":["/// <reference path=\"graph_node.ts\" /> \n\n\nimport graph_node = require('graph_node');\n\nexport class CPT implements ICPT {\n\n  private conditions:number; \n  private offsets:number[];\n  public  counts:number[][];\n  private node:graph_node.GraphNode;\n  private parents:graph_node.GraphNode[];\n\n  // build a conditional prob table\n  constructor( node : graph_node.GraphNode\n             , parents: graph_node.GraphNode[]) {\n    this.node = node;\n    this.parents = parents;\n    this.offsets = this.calc_offsets();\n    // number of conditions = product of value lengths\n    this.conditions = parents.map( (p) => { \n      return p.getValues().length; }).reduce( (a, b) => { \n        return a * b; }, 1);\n    this.counts = new Array(this.conditions);\n    \n    var base_arr = new Array(node.getValues().length); \n\n    for (var i = 0; i < base_arr.length; i++) {\n      base_arr[i] = 0; \n    }\n\n    for (var i = 0; i < this.counts.length; i++) {\n      this.counts[i] = base_arr.slice(); // copy\n    }\n\n\n    for (var i = 0; i < this.node.ndata.length; i++) {\n      var index = this.index(\n        this.parents.map((p) => { return p.ndata[i]; })\n      );\n\n      this.counts[index][node.ndata[i]]++;\n    }\n\n  }\n\n  // contstruct array for lookup function\n  private calc_offsets ( ) : number[] {\n    var t  \n    var offset = new Array(this.parents.length);\n    for (var i = 0 ; i < this.parents.length; i++) {\n      offset[i] = 1;\n      for (var j = i + 1; j < this.parents.length; j++) {\n        offset[i] *= this.parents[j].getValues().length;\n      }\n    }\n    return offset;\n  }\n\n  // find the index by taking cross-product of valuess and offset arrays\n  index(values: number[]) : number {\n    var num:number = 0;\n\n    for (var i = 0; i < this.parents.length; i++) {\n      num += this.offsets[i] * values[i];\n    }\n\n    return num;\n  }\n\n  // inverse of index\n  unindex(id: number) : number[] {\n    var values:number[] = [];\n\n    for (var i = 0; i < this.parents.length; i++) {\n      var current_val = Math.floor( id / this.offsets[i] );\n      values.push(current_val);\n      id -= current_val * this.offsets[i];\n    }\n    return values;\n  }\n\n  conditionTable() : string[][] {\n    var table = [];\n\n    for (var i = 0; i < this.conditions; i++) {\n      var indexes = this.unindex(i);\n      var row = [];\n      for (var j = 0; j < indexes.length; j++) {\n        row.push(this.parents[j].getValues()[indexes[j]]);\n      }\n      table.push(row);\n    } \n\n    return table;\n  }\n\n\n}\n"],"sourceRoot":"/source/"}