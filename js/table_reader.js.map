{"version":3,"sources":["table_reader.ts"],"names":["constructTable","TableReaderService","TableReaderService.constructor","TableReaderService.get"],"mappings":"AAAA,6BAA6B;AAC7B,kCAAkC;;IAMlC,AACA,qCADqC;4BACb,KAAK;QAC3BA,IAAIA,IAAIA,GAAGA,EAAEA,CAACA;QACdA,KAAKA,CAACA,IAAIA,CAACA,MAAMA,CAACA,OAAOA,CAACA,UAACA,CAACA,IAAOA,IAAIA,CAACA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA;QACpDA,KAAKA,CAACA,IAAIA,CAACA,OAAOA,CAACA,UAACA,GAAGA;YACrBA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,IAAIA,GAAGA,CAACA,CAACA,CAACA;gBACtBA,IAAIA,CAACA,KAAKA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,KAAKA,CAACA,CAACA,CAACA;YAC/BA,CAACA;QACHA,CAACA,CAACA,CAACA;QAGHA,IAAIA,KAAKA,GAAGA,EAAEA,CAACA;QACfA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,IAAIA,IAAIA,CAACA,CAACA,CAACA;YACvBA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,UAAUA,CAACA,SAASA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;QAC3DA,CAACA;QAEDA,MAAMA,CAACA,KAAKA,CAACA;IACfA,CAACA;IAED;QAIEC,4BAAoBA,EAAeA;YAAfC,OAAEA,GAAFA,EAAEA,CAAaA;QAEnCA,CAACA;QAGDD,gCAAGA,GAAHA,UAAIA,GAAYA;YACdE,IAAIA,QAAQA,GAA0CA,IAAIA,CAACA,EAAEA,CAACA,KAAKA,EAAEA,CAACA;YACtEA,QAAQA,CAACA,MAAMA,CAACA,qBAAqBA,CAACA,CAACA;YAEvCA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,EAAEA;gBACdA,QAAQA,EAAEA,IAAIA;gBACdA,SAASA,EAAEA,GAAGA;gBACdA,MAAMA,EAAEA,IAAIA;gBACZA,KAAKA,EAAGA,UAACA,GAAGA,IAAKA,OAAAA,QAAQA,CAACA,MAAMA,CAACA,GAAGA,CAACA,EAApBA,CAAoBA;gBACrCA,QAAQA,EAAGA,UAACA,GAAGA,EAAEA,GAAGA;oBAClBA,MAAMA,CAACA,GAAGA,GAAGA,QAAQA,CAACA,MAAMA,CAACA,GAAGA,CAACA,GAAGA,QAAQA,CAACA,OAAOA,CAACA,cAAcA,CAACA,GAAGA,CAACA,CAACA,CAACA;gBAC5EA,CAACA;aACFA,CAACA,CAACA;YAEHA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA;QAC1BA,CAACA;QAtBaF,yBAAMA,GAAGA,CAACA,IAAIA,CAACA,CAACA;QAuBhCA,yBAACA;IAADA,CAzBA,AAyBCA,IAAA;IAzBY,0BAAkB,qBAyB9B,CAAA","file":"table_reader.js","sourcesContent":["/// <references \"app.d.ts\" />\n/// <references \"graph_node.ts\" />\n\nimport ng         = require('angular');\nimport papa       = require('papaparse');\nimport graph_node = require('graph_node');\n\n// papa parsed object not in def file\nfunction constructTable(table) : graph_node.GraphNode[] {\n  var hash = {};\n  table.meta.fields.forEach((f) => { hash[f] = []; });\n  table.data.forEach((row) => {\n    for (var field in row) {\n      hash[field].push(row[field]);\n    }\n  });\n\n\n  var nodes = [];\n  for (var field in hash) { \n    nodes.push(new graph_node.GraphNode(field, hash[field]));\n  }\n\n  return nodes;\n}\n\nexport class TableReaderService {\n  \n  public static inject = ['$q'];\n\n  constructor(private $q:ng.IQService) {\n\n  }\n\n\n  get(url : string) : ng.IPromise<graph_node.GraphNode[]> {\n    var deferred : ng.IDeferred<graph_node.GraphNode[]> = this.$q.defer();\n    deferred.notify(\"About to read table\");\n\n    papa.parse(url, {\n      download: true,\n      delimiter: ' ',\n      header: true,\n      error : (err) => deferred.reject(err),\n      complete : (out, err) => { \n        return err ? deferred.reject(err) : deferred.resolve(constructTable(out));\n      }\n    });\n\n    return deferred.promise;\n  }             \n}\n"],"sourceRoot":"/source/"}