{"version":3,"sources":["input.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;IAQlC,EAAE,CAAC,QAAQ,CAAC,yBAAyB,EAAE,MAAM,EAAE,UAAC,GAAG,EAAE,GAAG;QACtD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,MAAM,GAAG,CAAC;QAAC,CAAC;QAAA,CAAC;QAExB,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,EAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAC,CAAC,CAAC;QAExD,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,CAAC,IAAO,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;YACjB,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACvC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;QACzB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC","file":"input.js","sourcesContent":["/// <reference path=\"graph_node.ts\" /> \n/// <reference path=\"graph.ts\" /> \n\nimport Baby = require('babyparse');\nimport fs = require('fs');\n\nimport graph_node = require('./graph_node');\nimport graph = require('./graph');\n\nfs.readFile('/home/mewalz/sample.tab', 'utf8', (err, dat) => { \n  if (err) { throw err; };\n\n  var p = Baby.parse(dat, {header: true, delimiter: ' '});  \n\n  var hash = {};\n  p.meta.fields.forEach((f) => { hash[f] = []; });\n  p.data.forEach((row) => {\n    for (var field in row) {\n      hash[field].push(row[field]);\n    }\n  });\n  console.log(hash);\n\n  var g = new graph.Graph('hello world');\n  for (var field in hash) { \n    g.addNode(new graph_node.GraphNode(field, hash[field]));\n  }\n  \n  var nodes = g.getNodes();\n  g.addEdge(nodes[0], nodes[3]);\n  g.addEdge(nodes[1], nodes[3]);\n  g.addEdge(nodes[2], nodes[3]);\n\n  console.log(g);\n  console.log(g.calculateCpt(nodes[3]));\n});\n"],"sourceRoot":"/source/"}