{"version":3,"sources":["test/graph.ts"],"names":[],"mappings":"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","file":"test/graph.js","sourcesContent":["/// <reference path=\"test.d.ts\" />\n/// <reference path=\"../graph_node.ts\" />\n/// <reference path=\"../graph.ts\" />\n\n\nimport chai        = require('chai');\nimport graph_node  = require('../graph_node');\nimport graph       = require('../graph');\n\n// fuck node\n// eval(require('fs').readFileSync('../aux_scripts/all.js', 'utf8'));\n//console.log(collections);\n\n\nvar expect = chai.expect;\n\n\ndescribe('Graph', () => {\n  var in_column = ['1', '2', '3', '*', '3'];\n\n  var gn1 = new graph_node.GraphNode('N1', in_column);\n  var gn2 = new graph_node.GraphNode('N2', in_column);\n  var gn3 = new graph_node.GraphNode('N3', in_column);\n  var gn4 = new graph_node.GraphNode('N4', in_column);\n  var gn5 = new graph_node.GraphNode('N5', in_column);\n\n  var all_gn = [gn1, gn2, gn3, gn4];\n\n  var g = new graph.Graph('test.txt', [gn1, gn2]);\n\n  it('should have name', (done) => {\n    expect(g.getName()).to.equals('test.txt');\n    done();\n  }); \n\n  it('.setName should change it', (done) => {\n    g.setName('penis');\n    expect(g.getName()).to.equals('penis');\n    done();\n  });\n\n  /*\n  it('.getNode should lookup node', (done) => {\n    expect(g.getNode(gn1.getName())).to.equal(gn1);\n    done();\n  });\n  */\n\n  it('.hasNode should return false, if node dne', (done) => { \n    expect(g.hasNode(gn3)).to.be.false;\n    done();\n  });\n\n  it('.addNode should be able to add unique node', (done) => {\n    g.addNode(gn3);\n    expect(g.hasNode(gn3)).to.be.true;\n    done();\n  });\n\n  it('.addNode should require that new node is of equal length');\n\n  it('.addNode should throw error when adding duplicate node', (done) => {\n    expect(() => { g.addNode(gn3); }).to.throw( Error);\n    done();\n  });\n\n  it('.deleteNode should delete the correct node', (done) => {\n    g.deleteNode(gn3); \n    expect(g.hasNode(gn3)).to.be.false;\n    expect(g.hasNode(gn1)).to.be.true;\n    expect(g.hasNode(gn2)).to.be.true;\n    done();\n  });\n\n  it('.deleteNode should delete edges to/from the node', (done) => {\n    g.addNode(gn3);\n    g.addEdge(gn1, gn3);\n    g.addEdge(gn3, gn2);\n    g.deleteNode(gn3); \n\n    expect(g.getEdges()).to.be.eql([]);\n\n    done();\n  });\n\n  it('.hasEdge should return false if edge dne', (done) => {\n    expect(g.hasEdge(gn1, gn2)).to.be.false;\n    done();\n  });\n\n  it('.addEdge should create a new edge', (done) => {\n    g.addEdge(gn1, gn2);\n    expect(g.getEdges()).to.be.eql([new graph.Edge(gn1, gn2)]);\n    expect(g.hasEdge(gn1, gn2)).to.be.true;\n    done();\n  });\n\n  it('.deleteEdge should delete an edge', (done) => {\n    g.deleteEdge(gn1, gn2);\n    expect(g.hasEdge(gn1, gn2)).to.be.false;\n    done();\n  });\n\n  var g2 = new graph.Graph('empty');\n  it('.topSort should produce empty list on empty graph', (done) => {\n    expect(g2.topSort()).to.be.eql([]);\n    done();\n  });\n\n  it('.topSort should work on a singleton graph', (done) => {\n      g2.addNode(gn1);\n      expect(g2.topSort()).to.be.eql([gn1]);\n      done();\n  });\n\n  it('.topSort should work on a two and three element chain', (done) => {\n    g2.addNode(gn2);\n    g2.addEdge(gn1, gn2);\n\n    expect(g2.topSort()).to.be.eql([gn1, gn2]);\n\n    g2.addNode(gn3);\n    g2.addEdge(gn2, gn3);\n    expect(g2.topSort()).to.be.eql([gn1, gn2, gn3]);\n\n    done();\n  });\n\n\n  it('.topSort should fail on a cycle', (done) => {\n    g2.addEdge(gn3, gn1);\n    expect(() => { g2.topSort(); }).to.throw(Error);\n    done();\n  });\n\n  it('.topSort should work in a complicated graph', (done) => {\n    var g = new graph.Graph('complicated', [gn1, gn2, gn3, gn4, gn5]);\n    g.addEdge(gn1, gn2);\n    g.addEdge(gn1, gn3);\n    g.addEdge(gn2, gn4);\n    g.addEdge(gn3, gn4);\n    g.addEdge(gn4, gn5);\n\n    var sort = g.topSort();\n\n\n    expect(sort.length).to.equal(5);\n    expect(sort[0]).to.equal(gn1);\n    expect(sort[1] === gn2 || sort[1] === gn3).to.be.true;\n    expect(sort[2] === gn2 || sort[2] === gn3).to.be.true;\n    expect(sort[3]).to.equal(gn4);\n    expect(sort[4]).to.equal(gn5);\n\n    done();\n  });\n\n\n});\n"],"sourceRoot":"/source/"}