{"version":3,"sources":["graph_node.ts"],"names":["GraphNode","GraphNode.constructor","GraphNode.getName","GraphNode.setName","GraphNode.getValues","GraphNode.getValue","GraphNode.getCell","GraphNode.length","GraphNode.setMissingVal","GraphNode.getMissingVal","GraphNode.getColumn","GraphNode.histogram"],"mappings":"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CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,UAAUA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA;oBAC7BA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC5BA,CAACA;YACHA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QACdA,CAACA;QAEDJ,4BAAQA,GAARA,UAASA,CAAUA;YACjBK,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;QACxBA,CAACA;QAEDL,mCAAmCA;QACnCA,2BAAOA,GAAPA,UAAQA,GAAWA;YACjBM,EAAEA,CAACA,CAACA,GAAGA,IAAIA,IAAIA,CAACA,MAAMA,EAAEA,CAACA,CAACA,CAACA;gBACzBA,MAAMA,IAAIA,UAAUA,CAACA;YACvBA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA;YACtCA,CAACA;QACHA,CAACA;QAEDN,gCAAgCA;QAChCA,0BAAMA,GAANA;YACEO,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,MAAMA,CAACA;QAC3BA,CAACA;QAEDP,iCAAaA,GAAbA,UAAcA,OAAeA;YAC3BQ,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;QACjDA,CAACA;QAGDR,yDAAyDA;QACzDA,iCAAaA,GAAbA;YACES,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA;gBACpBA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;YACtCA,CAACA;YACDA,MAAMA,CAACA,IAAIA,CAACA;QACdA,CAACA;QAEDT,6BAASA,GAATA;YAAAU,iBAECA;YADCA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,GAAGA,CAAEA,UAACA,KAAKA,IAAOA,MAAMA,CAACA,KAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAAEA,CAACA;QACrEA,CAACA;QAEDV,iCAAiCA;QACjCA,6BAASA,GAATA;YACEW,IAAIA,SAASA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,GAAGA,CAAEA,UAACA,CAACA,IAAOA,MAAMA,CAACA,CAACA,CAAAA,CAACA,CAACA,CAACA,CAACA;YAEtDA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAAEA,UAACA,CAACA,IAAOA,SAASA,CAACA,CAACA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA,CAACA;YAE7DA,MAAMA,CAACA,SAASA,CAACA;QACnBA,CAACA;QACHX,gBAACA;IAADA,CAhIA,AAgICA,IAAA;IAhIY,iBAAS,YAgIrB,CAAA","file":"graph_node.js","sourcesContent":["/// <requires \"app.d.ts\" />\n\nimport d3 = require('d3');\n\nexport class GraphNode {\n  name : string;\n  // should we delete rows when this value is missing\n  // not implemented\n  // private filterMissing: boolean = false;\n  // factor levels\n\n  private values:string[];\n  // the ordered data \n  // which value is missing in values array is missing\n  private missingVal:number = null;\n\n  public donut;\n\n  // the column stored as the index in the value array\n  public ndata:number[];\n\n  constructor(name: string, column: string[]) {\n\n    this.name = name;\n    this.values = [];\n    this.ndata = new Array(column.length);\n\n    for (var i: number = 0; i < column.length; i++) {\n      var valueIdx = this.values.indexOf(column[i]);\n      if (valueIdx === -1) { // push a new value, if it doesn't exist yet\n        this.values.push(column[i]);\n        valueIdx = this.values.length - 1;\n      }\n      // store the value\n      this.ndata[i] = valueIdx;\n    }\n\n\n    if (this.values.length <= 1) {\n      throw new Error(\n         'Column ' + name + ' must have at least two differing values'\n      ); \n    }\n\n   var pie = d3.layout.pie()\n    .sort(null);\n\n   var color = d3.scale.category20();\n\n   var arc = d3.svg.arc()\n    .innerRadius(50)\n    .outerRadius(60);\n\n    var arcs = pie(this.histogram()).map(arc);\n\n    this.donut = [];\n\n    for(var i = 0; i < this.values.length; i++) {\n      this.donut.push({name: this.values[i],\n                       arc: arcs[i],\n                       color: color(i)});\n    }\n\n    console.log(this.donut);\n      \n  }\n\n  getName() : string {\n    return this.name;\n  }\n  setName(name: string) {\n    this.name = name;\n  }\n\n  // returns a list of values with missing first\n  getValues( ) : string[] {\n    var vals = [];\n    if (this.missingVal) {\n      vals.push(this.values[this.missingVal]);\n    }\n\n    for (var i:number = 0; i < this.values.length; i++) {\n      if (!(this.missingVal === i)) {\n        vals.push(this.values[i]);\n      }\n    }\n    return vals;\n  }\n\n  getValue(i : number) : string {\n    return this.values[i];\n  }\n\n  // returns the value at the nth row\n  getCell(row: number) : string {\n    if (row >= this.length()) {\n      throw new RangeError; \n    } else {\n      return this.values[this.ndata[row]]; \n    }\n  }\n\n  // returns number of data points\n  length() : number {\n    return this.ndata.length;\n  }\n\n  setMissingVal(missing: string) {\n    this.missingVal = this.values.indexOf(missing);\n  }\n\n\n  // returns missing value if it exists, null if it doesn't\n  getMissingVal() : string {\n    if (this.missingVal) {\n      return this.values[this.missingVal];\n    }\n    return null;\n  }\n\n  getColumn() : Array<string> {\n    return this.ndata.map( (index) => { return this.values[index]; } );\n  }\n\n  // return the node as a histogram\n  histogram() {\n    var base_hist = this.values.map( (i) => { return 0 });\n    \n    this.ndata.forEach( (i) => { base_hist[i]++; return true; });\n\n    return base_hist;\n  }\n}\n"],"sourceRoot":"/source/"}